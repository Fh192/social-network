{"version":3,"sources":["components/Profile/EditProfile/Contact/Contact.module.css","components/Profile/EditProfile/EditProfile.module.css","components/Profile/EditProfile/Contact/Contact.tsx","components/Profile/EditProfile/EditProfile.tsx"],"names":["module","exports","Contact","site","cx","classNames","bind","styles","inputRef","useRef","useState","inputShown","setInputShow","isDarkMode","useDarkMode","className","contact","onClick","current","focus","icon","icons","onBlur","type","inputMode","innerRef","name","EditProfile","dispatch","useDispatch","navigate","useNavigate","submitting","setSubmitting","userId","useSelector","s","auth","id","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","profileId","contactsAsArr","Object","entries","map","c","initialFormValues","fromEntries","submitHandler","values","a","JSON","stringify","updateProfile","getUserProfile","useEffect","Preloader","color","undefined","editProfile","editProfileD","title","onSubmit","initialValues","setFieldValue","errors","basicInformation","row","username","required","about","job","style","as","wrap","placeholder","contactsList","buttons","disabled","size"],"mappings":"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","file":"static/js/6.77aefa0f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contact_contact__1G3o-\",\"contactD\":\"Contact_contactD__2fo2x\",\"icon\":\"Contact_icon__130UT\",\"inputShown\":\"Contact_inputShown__5h8qM\",\"site\":\"Contact_site__3xy25\",\"vk\":\"Contact_vk__iq5_I\",\"instagram\":\"Contact_instagram__1VB8v\",\"facebook\":\"Contact_facebook__3PdYW\",\"youtube\":\"Contact_youtube__3ev6y\",\"twitter\":\"Contact_twitter__fYPDw\",\"github\":\"Contact_github__1ztye\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editProfile\":\"EditProfile_editProfile__3be1W\",\"editProfileD\":\"EditProfile_editProfileD__9K21G\",\"col\":\"EditProfile_col__2pkHu\",\"row\":\"EditProfile_row__3MVST\",\"title\":\"EditProfile_title__3PpoO\",\"basicInformation\":\"EditProfile_basicInformation__3Cz5V\",\"username\":\"EditProfile_username__1uXcW\",\"about\":\"EditProfile_about__31uCd\",\"job\":\"EditProfile_job__j-xUH\",\"lookingForAJob\":\"EditProfile_lookingForAJob__1M4AM\",\"lookingForAJobDescription\":\"EditProfile_lookingForAJobDescription__1NLAy\",\"contactsList\":\"EditProfile_contactsList__2zXSX\",\"contacts\":\"EditProfile_contacts__3IfUd\",\"buttons\":\"EditProfile_buttons__225WE\"};","import classNames from 'classnames/bind';\r\nimport { Field } from 'formik';\r\nimport React, { useRef, useState } from 'react';\r\nimport { useDarkMode } from 'usehooks-ts';\r\nimport { icons } from '../../../../common/contactIcons';\r\nimport { IContacts } from '../../../../types/profile';\r\nimport styles from './Contact.module.css';\r\n\r\ninterface Props {\r\n  site: keyof IContacts;\r\n}\r\n\r\nexport const Contact: React.FC<Props> = ({ site }) => {\r\n  const cx = classNames.bind(styles);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const [inputShown, setInputShow] = useState(false);\r\n  const { isDarkMode } = useDarkMode();\r\n\r\n  const clickHandler = () => {\r\n    setInputShow(true);\r\n    inputRef.current?.focus();\r\n  };\r\n  const blurHandler = () => {\r\n    setInputShow(false);\r\n  };\r\n\r\n  return (\r\n    <li\r\n      className={cx({\r\n        contact: true,\r\n        [site]: true,\r\n        inputShown,\r\n        contactD: isDarkMode,\r\n      })}\r\n      onClick={clickHandler}\r\n    >\r\n      <span className={styles.icon}>{icons[site]}</span>\r\n      <Field\r\n        onBlur={blurHandler}\r\n        type='url'\r\n        inputMode='url'\r\n        innerRef={inputRef}\r\n        name={`contacts.${site}`}\r\n      />\r\n      <span className={styles.site}>{site === 'vk' ? 'vkontakte' : site}</span>\r\n    </li>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from '../../../hooks/useDispatch';\r\nimport { useSelector } from '../../../hooks/useSelector';\r\nimport {\r\n  getUserProfile,\r\n  updateProfile,\r\n} from '../../../store/reducers/profileReducer';\r\nimport { IContacts } from '../../../types/profile';\r\nimport { Contact } from './Contact/Contact';\r\nimport styles from './EditProfile.module.css';\r\nimport { Formik, Field, Form } from 'formik';\r\nimport Preloader from '../../Preloader/Preloader';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport classNames from 'classnames/bind';\r\nimport { useDarkMode } from 'usehooks-ts';\r\n\r\nconst EditProfile: React.FC = () => {\r\n  const cx = classNames.bind(styles);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const { isDarkMode } = useDarkMode();\r\n  const userId = useSelector(s => s.auth.id);\r\n  const {\r\n    fullName,\r\n    lookingForAJob,\r\n    lookingForAJobDescription,\r\n    aboutMe,\r\n    contacts,\r\n    userId: profileId,\r\n  } = useSelector(s => s.profile);\r\n\r\n  const contactsAsArr = Object.entries(contacts).map(c => {\r\n    return [c[0], c[1] || ''];\r\n  }) as Array<[keyof IContacts, string]>;\r\n\r\n  const initialFormValues = {\r\n    lookingForAJob,\r\n    lookingForAJobDescription: lookingForAJobDescription || '',\r\n    fullName,\r\n    aboutMe: aboutMe || '',\r\n    contacts: Object.fromEntries(contactsAsArr) as {\r\n      [k in keyof IContacts]: string;\r\n    },\r\n  };\r\n\r\n  type IFormValues = typeof initialFormValues;\r\n\r\n  const submitHandler = async (values: IFormValues) => {\r\n    const hasChanges =\r\n      JSON.stringify(initialFormValues) !== JSON.stringify(values);\r\n\r\n    if (hasChanges) {\r\n      setSubmitting(true);\r\n      await dispatch(updateProfile(values));\r\n      await dispatch(getUserProfile(userId as number));\r\n      setSubmitting(false);\r\n    }\r\n    navigate(`/profile/${userId}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userId && userId !== profileId) {\r\n      dispatch(getUserProfile(userId));\r\n    }\r\n  }, [dispatch, userId, profileId]);\r\n\r\n  if (profileId !== userId) {\r\n    return <Preloader color={isDarkMode ? '#8ea6f4' : undefined} />;\r\n  }\r\n\r\n  return (\r\n    <div className={cx({ editProfile: true, editProfileD: isDarkMode })}>\r\n      <h2 className={styles.title}>Basic Information</h2>\r\n      <Formik onSubmit={submitHandler} initialValues={initialFormValues}>\r\n        {({ values, errors, setFieldValue, initialValues }) => (\r\n          <Form>\r\n            <div className={styles.basicInformation}>\r\n              <div className={styles.row}>\r\n                <fieldset className={styles.username}>\r\n                  <legend>\r\n                    Username<sup>*</sup>\r\n                  </legend>\r\n                  <Field type='text' name='fullName' required={true} />\r\n                </fieldset>\r\n                <fieldset className={styles.about}>\r\n                  <legend>About</legend>\r\n                  <Field type='text' name='aboutMe' />\r\n                </fieldset>\r\n              </div>\r\n              <div className={`${styles.row} ${styles.job}`}>\r\n                <div\r\n                  className={styles.lookingForAJob}\r\n                  onClick={() =>\r\n                    setFieldValue('lookingForAJob', !values.lookingForAJob)\r\n                  }\r\n                >\r\n                  <span\r\n                    style={{\r\n                      color: values.lookingForAJob ? '#446f31' : '#9a0000',\r\n                    }}\r\n                  >\r\n                    {values.lookingForAJob\r\n                      ? 'Looking for a job'\r\n                      : 'Not looking for a job'}\r\n                  </span>\r\n                </div>\r\n                <div className={styles.lookingForAJobDescription}>\r\n                  <Field\r\n                    as='textarea'\r\n                    wrap='hard'\r\n                    name='lookingForAJobDescription'\r\n                    placeholder='Describe your skills, work experience...'\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={styles.contacts}>\r\n              <h2 className={styles.title}>Contacts</h2>\r\n              <ul className={styles.contactsList}>\r\n                {contactsAsArr.map(contact => (\r\n                  <Contact site={contact[0]} key={contact[0]} />\r\n                ))}\r\n              </ul>\r\n            </div>\r\n            <div className={styles.buttons}>\r\n              <button type='submit' disabled={submitting}>\r\n                {submitting ? <Preloader size='20px' /> : 'Save'}\r\n              </button>\r\n              <button\r\n                type='reset'\r\n                onClick={() => {\r\n                  if (values === initialValues) {\r\n                    navigate(`/profile/${userId}`);\r\n                  }\r\n                }}\r\n                disabled={submitting}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditProfile;\r\n"],"sourceRoot":""}